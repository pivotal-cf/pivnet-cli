// Code generated by counterfeiter. DO NOT EDIT.
package printerfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/printer"
)

type FakePrinter struct {
	PrintJSONStub        func(interface{}) error
	printJSONMutex       sync.RWMutex
	printJSONArgsForCall []struct {
		arg1 interface{}
	}
	printJSONReturns struct {
		result1 error
	}
	printJSONReturnsOnCall map[int]struct {
		result1 error
	}
	PrintYAMLStub        func(interface{}) error
	printYAMLMutex       sync.RWMutex
	printYAMLArgsForCall []struct {
		arg1 interface{}
	}
	printYAMLReturns struct {
		result1 error
	}
	printYAMLReturnsOnCall map[int]struct {
		result1 error
	}
	PrintlnStub        func(string) error
	printlnMutex       sync.RWMutex
	printlnArgsForCall []struct {
		arg1 string
	}
	printlnReturns struct {
		result1 error
	}
	printlnReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrinter) PrintJSON(arg1 interface{}) error {
	fake.printJSONMutex.Lock()
	ret, specificReturn := fake.printJSONReturnsOnCall[len(fake.printJSONArgsForCall)]
	fake.printJSONArgsForCall = append(fake.printJSONArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("PrintJSON", []interface{}{arg1})
	fake.printJSONMutex.Unlock()
	if fake.PrintJSONStub != nil {
		return fake.PrintJSONStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.printJSONReturns
	return fakeReturns.result1
}

func (fake *FakePrinter) PrintJSONCallCount() int {
	fake.printJSONMutex.RLock()
	defer fake.printJSONMutex.RUnlock()
	return len(fake.printJSONArgsForCall)
}

func (fake *FakePrinter) PrintJSONCalls(stub func(interface{}) error) {
	fake.printJSONMutex.Lock()
	defer fake.printJSONMutex.Unlock()
	fake.PrintJSONStub = stub
}

func (fake *FakePrinter) PrintJSONArgsForCall(i int) interface{} {
	fake.printJSONMutex.RLock()
	defer fake.printJSONMutex.RUnlock()
	argsForCall := fake.printJSONArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrinter) PrintJSONReturns(result1 error) {
	fake.printJSONMutex.Lock()
	defer fake.printJSONMutex.Unlock()
	fake.PrintJSONStub = nil
	fake.printJSONReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) PrintJSONReturnsOnCall(i int, result1 error) {
	fake.printJSONMutex.Lock()
	defer fake.printJSONMutex.Unlock()
	fake.PrintJSONStub = nil
	if fake.printJSONReturnsOnCall == nil {
		fake.printJSONReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.printJSONReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) PrintYAML(arg1 interface{}) error {
	fake.printYAMLMutex.Lock()
	ret, specificReturn := fake.printYAMLReturnsOnCall[len(fake.printYAMLArgsForCall)]
	fake.printYAMLArgsForCall = append(fake.printYAMLArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("PrintYAML", []interface{}{arg1})
	fake.printYAMLMutex.Unlock()
	if fake.PrintYAMLStub != nil {
		return fake.PrintYAMLStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.printYAMLReturns
	return fakeReturns.result1
}

func (fake *FakePrinter) PrintYAMLCallCount() int {
	fake.printYAMLMutex.RLock()
	defer fake.printYAMLMutex.RUnlock()
	return len(fake.printYAMLArgsForCall)
}

func (fake *FakePrinter) PrintYAMLCalls(stub func(interface{}) error) {
	fake.printYAMLMutex.Lock()
	defer fake.printYAMLMutex.Unlock()
	fake.PrintYAMLStub = stub
}

func (fake *FakePrinter) PrintYAMLArgsForCall(i int) interface{} {
	fake.printYAMLMutex.RLock()
	defer fake.printYAMLMutex.RUnlock()
	argsForCall := fake.printYAMLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrinter) PrintYAMLReturns(result1 error) {
	fake.printYAMLMutex.Lock()
	defer fake.printYAMLMutex.Unlock()
	fake.PrintYAMLStub = nil
	fake.printYAMLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) PrintYAMLReturnsOnCall(i int, result1 error) {
	fake.printYAMLMutex.Lock()
	defer fake.printYAMLMutex.Unlock()
	fake.PrintYAMLStub = nil
	if fake.printYAMLReturnsOnCall == nil {
		fake.printYAMLReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.printYAMLReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) Println(arg1 string) error {
	fake.printlnMutex.Lock()
	ret, specificReturn := fake.printlnReturnsOnCall[len(fake.printlnArgsForCall)]
	fake.printlnArgsForCall = append(fake.printlnArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Println", []interface{}{arg1})
	fake.printlnMutex.Unlock()
	if fake.PrintlnStub != nil {
		return fake.PrintlnStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.printlnReturns
	return fakeReturns.result1
}

func (fake *FakePrinter) PrintlnCallCount() int {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	return len(fake.printlnArgsForCall)
}

func (fake *FakePrinter) PrintlnCalls(stub func(string) error) {
	fake.printlnMutex.Lock()
	defer fake.printlnMutex.Unlock()
	fake.PrintlnStub = stub
}

func (fake *FakePrinter) PrintlnArgsForCall(i int) string {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	argsForCall := fake.printlnArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePrinter) PrintlnReturns(result1 error) {
	fake.printlnMutex.Lock()
	defer fake.printlnMutex.Unlock()
	fake.PrintlnStub = nil
	fake.printlnReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) PrintlnReturnsOnCall(i int, result1 error) {
	fake.printlnMutex.Lock()
	defer fake.printlnMutex.Unlock()
	fake.PrintlnStub = nil
	if fake.printlnReturnsOnCall == nil {
		fake.printlnReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.printlnReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePrinter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.printJSONMutex.RLock()
	defer fake.printJSONMutex.RUnlock()
	fake.printYAMLMutex.RLock()
	defer fake.printYAMLMutex.RUnlock()
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePrinter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ printer.Printer = new(FakePrinter)
