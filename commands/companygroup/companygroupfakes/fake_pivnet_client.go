// Code generated by counterfeiter. DO NOT EDIT.
package companygroupfakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v2"
	"github.com/pivotal-cf/pivnet-cli/commands/companygroup"
)

type FakePivnetClient struct {
	CompanyGroupsStub        func() ([]pivnet.CompanyGroup, error)
	companyGroupsMutex       sync.RWMutex
	companyGroupsArgsForCall []struct{}
	companyGroupsReturns     struct {
		result1 []pivnet.CompanyGroup
		result2 error
	}
	companyGroupsReturnsOnCall map[int]struct {
		result1 []pivnet.CompanyGroup
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetClient) CompanyGroups() ([]pivnet.CompanyGroup, error) {
	fake.companyGroupsMutex.Lock()
	ret, specificReturn := fake.companyGroupsReturnsOnCall[len(fake.companyGroupsArgsForCall)]
	fake.companyGroupsArgsForCall = append(fake.companyGroupsArgsForCall, struct{}{})
	fake.recordInvocation("CompanyGroups", []interface{}{})
	fake.companyGroupsMutex.Unlock()
	if fake.CompanyGroupsStub != nil {
		return fake.CompanyGroupsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.companyGroupsReturns.result1, fake.companyGroupsReturns.result2
}

func (fake *FakePivnetClient) CompanyGroupsCallCount() int {
	fake.companyGroupsMutex.RLock()
	defer fake.companyGroupsMutex.RUnlock()
	return len(fake.companyGroupsArgsForCall)
}

func (fake *FakePivnetClient) CompanyGroupsReturns(result1 []pivnet.CompanyGroup, result2 error) {
	fake.CompanyGroupsStub = nil
	fake.companyGroupsReturns = struct {
		result1 []pivnet.CompanyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) CompanyGroupsReturnsOnCall(i int, result1 []pivnet.CompanyGroup, result2 error) {
	fake.CompanyGroupsStub = nil
	if fake.companyGroupsReturnsOnCall == nil {
		fake.companyGroupsReturnsOnCall = make(map[int]struct {
			result1 []pivnet.CompanyGroup
			result2 error
		})
	}
	fake.companyGroupsReturnsOnCall[i] = struct {
		result1 []pivnet.CompanyGroup
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.companyGroupsMutex.RLock()
	defer fake.companyGroupsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePivnetClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ companygroup.PivnetClient = new(FakePivnetClient)
